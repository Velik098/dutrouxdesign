const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const path = require('path');
const { Low } = require('lowdb');
const { JSONFile } = require('lowdb/node');
const { nanoid } = require('nanoid');
const axios = require('axios');
const crypto = require('crypto');
const bodyParser = require('body-parser');
require('dotenv').config();

const TERMINAL_KEY = '1754495953908DEMO'; // ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ –±–æ–µ–≤–æ–π –∏–∑ –¢-–ë–∏–∑–Ω–µ—Å
const PASSWORD = '%woQMJBy3fIovnft';     // ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ –±–æ–µ–≤–æ–π –∏–∑ –¢-–ë–∏–∑–Ω–µ—Å
const NOTIFY_URL = 'https://dutroux-1.onrender.com/webhook'; // –∫–æ–ª–±—ç–∫

// === –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–û–ö–ï–ù–ê ===
function generateToken(params) {
  const sorted = Object.keys(params)
    .filter(key => key !== 'DATA' && key !== 'Receipt')
    .sort()
    .map(key => params[key])
    .join('') + PASSWORD;
  return crypto.createHash('sha256').update(sorted).digest('hex');
}

(async () => {
  const bot = new Telegraf(process.env.BOT_TOKEN);
  const app = express();
  const PORT = process.env.PORT || 10000;
  const WEBAPP_URL = 'https://dutroux-1.onrender.com';

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø DB ===
  const adapter = new JSONFile('db.json');
  const db = new Low(adapter, { orders: [], balance: 0 });
  await db.read();
  if (!db.data) db.data = { orders: [], balance: 0 };
  await db.write();

  // === BODY PARSER ===
  app.use(bodyParser.json());

  // === Telegram —Å—Ç–∞—Ä—Ç ===
  bot.start((ctx) => {
    ctx.reply(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dutroux Sell! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
      Markup.inlineKeyboard([
        Markup.button.webApp('üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', `${WEBAPP_URL}`)
      ])
    );
  });

  // === –†–æ—É—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞) ===
  app.post('/create-payment', async (req, res) => {
    try {
      const { amount, userId } = req.body;

      const params = {
        TerminalKey: TERMINAL_KEY,
        Amount: amount * 100, // –∫–æ–ø–µ–π–∫–∏
        OrderId: nanoid(),
        Description: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
        NotificationURL: NOTIFY_URL
      };

      params.Token = generateToken(params);

      const response = await axios.post("https://securepay.tinkoff.ru/v2/Init", params);
      res.json(response.data);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:", err.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º" });
    }
  });

  // === –ö–æ–ª–±—ç–∫ –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ (–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã) ===
  app.post('/webhook', async (req, res) => {
    const { Status, OrderId, Amount } = req.body;

    if (Status === "CONFIRMED") {
      await db.read();
      db.data.balance += Amount / 100; // –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Ä—É–±–ª–∏
      await db.write();
      console.log("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞", Amount / 100, "—Ä—É–±.");
    }

    res.sendStatus(200);
  });

  // === –û—Ç–¥–∞—ë–º —Ñ—Ä–æ–Ω—Ç (index.html) ===
  app.use(express.static(path.join(__dirname)));

  // === –ó–∞–ø—É—Å–∫ ===
  bot.launch();
  app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
})();
